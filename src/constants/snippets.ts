/**
 * Snippet Definitions for Claude Prompt Builder
 *
 * This file contains all predefined prompt snippets and templates
 * that users can select and combine to build structured prompts.
 */

import type { Snippet } from '@/types/snippet.types';

/**
 * Predefined snippet templates for Claude Code prompts
 * Based on .vscode/claude-prompts.claude-snippets.json
 */
export const SNIPPETS: Snippet[] = [
  // 1. Session Start
  {
    id: 'cstart',
    name: 'Session Start',
    description: 'Initialisierung einer neuen Claude Code Session',
    category: 'start',
    icon: 'üöÄ',
    template: `Hi Claude! üëã

Projekt-Kontext:
üìã Bitte lies DEVELOPMENT.md f√ºr Architektur-Richtlinien
üèóÔ∏è Dieses Projekt folgt strikt modularer Architektur
‚ö†Ô∏è √Ñndere nur explizit genannte Dateien

Best√§tige kurz, dass du die Regeln verstanden hast, dann starten wir!`,
    placeholders: [],

    longDescription:
      'Dieser Snippet sollte IMMER am Anfang jeder neuen Claude Code Session verwendet werden. Er stellt sicher, dass Claude die Projekt-Architektur und wichtige Regeln aus der DEVELOPMENT.md kennt. Dadurch arbeitet Claude pr√§ziser und h√§lt sich an deine Projekt-Standards.',

    whenToUse:
      'Verwende diesen Snippet bei jeder neuen Chat-Session mit Claude Code, bevor du mit der eigentlichen Arbeit beginnst. Nicht n√∂tig wenn du in derselben Session weitermachst.',

    useCase:
      'Du √∂ffnest morgens deinen Editor und startest eine neue Claude Code Session. Bevor du anf√§ngst Features zu bauen oder Bugs zu fixen, sendest du diesen Prompt. Claude liest dann deine DEVELOPMENT.md und kennt deine Architektur-Regeln (z.B. modularer Aufbau, max. 200 Zeilen pro Datei).',

    fieldGuide: [],
  },

  // 2. Standard Prompt
  {
    id: 'cprompt',
    name: 'Standard Prompt',
    description: 'Standard Claude Prompt mit DEVELOPMENT.md Kontext',
    category: 'other',
    icon: 'üìù',
    template: `[Kontext: DEVELOPMENT.md - Modulare Architektur]

Aufgabe: {{task}}
Scope: {{scope}}

{{details}}`,
    placeholders: [
      {
        id: 'task',
        label: 'Aufgabe',
        type: 'text',
        required: true,
        placeholder: 'Was soll gemacht werden?',
      },
      {
        id: 'scope',
        label: 'Scope',
        type: 'text',
        required: true,
        placeholder: 'Welche Dateien?',
      },
      {
        id: 'details',
        label: 'Details',
        type: 'multiline',
        required: false,
        placeholder: 'Weitere Details...',
      },
    ],

    longDescription:
      'Der vielseitigste Snippet f√ºr allt√§gliche Entwicklungsaufgaben. Er bietet eine klare Struktur mit Aufgabe, Scope und Details. Perfekt f√ºr kleinere √Ñnderungen, wo du nicht alle Details eines spezialisierten Snippets brauchst. H√§lt den Kontext zu DEVELOPMENT.md.',

    whenToUse:
      'Verwende diesen Snippet f√ºr allt√§gliche, unkomplizierte Aufgaben wie "Button-Farbe √§ndern", "Loading-State hinzuf√ºgen" oder "Typo fixen". Nicht geeignet f√ºr gro√üe neue Features oder komplexe Refactorings.',

    useCase:
      'Du m√∂chtest dass der Submit-Button in deinem LoginForm w√§hrend des API-Calls disabled wird. Du gibst als Task "Button w√§hrend Submit disablen" an, als Scope "src/components/LoginForm.tsx" und als Details kannst du optional noch Styling-W√ºnsche angeben.',

    fieldGuide: [
      {
        fieldId: 'task',
        explanation: 'Eine pr√§gnante Beschreibung was gemacht werden soll',
        example: 'F√ºge einen Loading-State zum Button hinzu',
        tips:
          'Sei spezifisch aber knapp. Verwende Verben im Imperativ (F√ºge hinzu, √Ñndere, Entferne)',
      },
      {
        fieldId: 'scope',
        explanation:
          'Welche Dateien sollen ge√§ndert werden? Nutze relative Pfade',
        example: 'src/components/Button/Button.tsx',
        tips:
          'Je pr√§ziser der Scope, desto besser. Mehrere Dateien mit Komma trennen',
      },
      {
        fieldId: 'details',
        explanation: 'Zus√§tzliche Anforderungen oder Einschr√§nkungen (optional)',
        example:
          '- Nutze einen Spinner aus Lucide Icons\n- Button Text: "Laden..."',
        tips:
          'Nutze Stichpunkte f√ºr √úbersichtlichkeit. Erw√§hne wichtige Edge Cases',
      },
    ],
  },

  // 3. New Feature/Component
  {
    id: 'cfeature',
    name: 'Neue Feature/Komponente',
    description: 'Template f√ºr neue Features/Komponenten',
    category: 'component',
    icon: '‚ú®',
    template: `üìã Kontext: Siehe DEVELOPMENT.md (modulare Architektur)

Aufgabe: Erstelle eine neue {{featureName}} Komponente/Feature

Anforderungen:
- {{requirement1}}
- {{requirement2}}
- {{requirement3}}

Ordner-Struktur:
src/{{folder}}/
  ‚îú‚îÄ‚îÄ {{featureName}}.tsx
  ‚îú‚îÄ‚îÄ {{featureName}}.types.ts
  ‚îî‚îÄ‚îÄ {{featureName}}.test.ts

WICHTIG: Keine anderen Dateien √§ndern ohne zu fragen!

{{additionalDetails}}`,
    placeholders: [
      {
        id: 'featureName',
        label: 'Feature/Komponenten-Name',
        type: 'text',
        required: true,
        placeholder: 'z.B. UserProfile, Dashboard',
      },
      {
        id: 'requirement1',
        label: 'Anforderung 1',
        type: 'text',
        required: true,
        placeholder: 'Erste Anforderung',
      },
      {
        id: 'requirement2',
        label: 'Anforderung 2',
        type: 'text',
        required: true,
        placeholder: 'Zweite Anforderung',
      },
      {
        id: 'requirement3',
        label: 'Anforderung 3',
        type: 'text',
        required: false,
        placeholder: 'Dritte Anforderung (optional)',
      },
      {
        id: 'folder',
        label: 'Ordner-Pfad',
        type: 'text',
        required: true,
        placeholder: 'z.B. components, features/dashboard',
        defaultValue: 'components',
      },
      {
        id: 'additionalDetails',
        label: 'Weitere Details',
        type: 'multiline',
        required: false,
        placeholder: 'Zus√§tzliche Informationen...',
      },
    ],

    longDescription:
      'Dieser Snippet ist ideal um neue Features oder Komponenten von Grund auf zu erstellen. Er hilft dir dabei die Anforderungen strukturiert zu definieren und stellt sicher, dass Claude die richtige Ordner-Struktur gem√§√ü DEVELOPMENT.md anlegt. Betont die Wichtigkeit, keine ungewollten Dateien zu √§ndern.',

    whenToUse:
      'Nutze diesen Snippet wenn du etwas komplett Neues erstellen m√∂chtest. Ideal f√ºr neue React-Komponenten, Features oder Module. Nicht geeignet wenn du nur bestehenden Code √§ndern m√∂chtest.',

    useCase:
      'Du baust eine Social-Media-App und brauchst eine neue CommentSection-Komponente. Du definierst die Anforderungen (Kommentare anzeigen, Replies erlauben, Like-Funktion) und Claude erstellt die komplette Komponente mit Types, Tests und korrekter Ordner-Struktur.',

    fieldGuide: [
      {
        fieldId: 'featureName',
        explanation: 'Name des Features oder der Komponente in PascalCase',
        example: 'CommentSection',
        tips:
          'Verwende beschreibende Namen. Vermeide Abk√ºrzungen. Bei Komponenten: singular (Button, nicht Buttons)',
      },
      {
        fieldId: 'requirement1',
        explanation: 'Die wichtigste Anforderung oder Hauptfunktion',
        example: 'Zeigt Liste aller Kommentare mit Autor und Zeitstempel',
        tips:
          'Priorisiere! Die erste Anforderung sollte die wichtigste sein',
      },
      {
        fieldId: 'requirement2',
        explanation: 'Die zweite Anforderung',
        example: 'Erm√∂glicht Replies auf Kommentare (verschachtelt)',
        tips:
          'Denke an Interaktionen und Benutzerfreundlichkeit',
      },
      {
        fieldId: 'requirement3',
        explanation: 'Eine dritte Anforderung (optional)',
        example: 'Like-Funktion f√ºr Kommentare mit Counter',
        tips:
          'Nutze dieses Feld f√ºr Nice-to-have Features',
      },
      {
        fieldId: 'folder',
        explanation: 'In welchem Ordner soll die Komponente angelegt werden?',
        example: 'components/Comment',
        tips:
          'Standardwert ist "components". F√ºr Features nutze "features/[name]"',
      },
      {
        fieldId: 'additionalDetails',
        explanation: 'Weitere Anforderungen, Design-W√ºnsche oder technische Details',
        example:
          '- Responsive Design\n- Dark Mode Support\n- Nutze Tailwind CSS\n- Lazy Loading f√ºr lange Kommentar-Listen',
        tips:
          'Nutze Stichpunkte. Erw√§hne Styling-Framework, Accessibility, Performance',
      },
    ],
  },

  // 4. Bug Fix
  {
    id: 'cbugfix',
    name: 'Bug Fix',
    description: 'Template f√ºr Bug-Fixes',
    category: 'fix',
    icon: 'üêõ',
    template: `[Kontext: DEVELOPMENT.md]

üêõ Bug-Fix: {{bugTitle}}

Problem:
{{problem}}

Fehlermeldung:
\`\`\`
{{errorMessage}}
\`\`\`

Betroffene Datei(en):
- {{affectedFiles}}

Erwartetes Verhalten:
{{expectedBehavior}}

Scope: NUR die oben genannten Dateien √§ndern!

{{additionalInfo}}`,
    placeholders: [
      {
        id: 'bugTitle',
        label: 'Bug-Titel',
        type: 'text',
        required: true,
        placeholder: 'Kurze Beschreibung des Bugs',
      },
      {
        id: 'problem',
        label: 'Problem-Beschreibung',
        type: 'textarea',
        required: true,
        placeholder: 'Detaillierte Beschreibung des Problems',
      },
      {
        id: 'errorMessage',
        label: 'Fehlermeldung',
        type: 'textarea',
        required: false,
        placeholder: 'Fehlermeldung aus Console/Log',
      },
      {
        id: 'affectedFiles',
        label: 'Betroffene Dateien',
        type: 'multiline',
        required: true,
        placeholder: 'src/components/Button.tsx\nsrc/utils/helper.ts',
      },
      {
        id: 'expectedBehavior',
        label: 'Erwartetes Verhalten',
        type: 'textarea',
        required: true,
        placeholder: 'Was sollte stattdessen passieren?',
      },
      {
        id: 'additionalInfo',
        label: 'Zus√§tzliche Infos',
        type: 'multiline',
        required: false,
        placeholder: 'Weitere Informationen...',
      },
    ],

    longDescription:
      'Der Bug-Fix Snippet hilft dir dabei, Fehler pr√§zise zu beschreiben und schnell zu beheben. Er strukturiert alle wichtigen Informationen: Was ist kaputt, wo tritt der Fehler auf, welche Fehlermeldung erscheint, und wie sollte es funktionieren. Claude kann dadurch gezielt debuggen.',

    whenToUse:
      'Verwende diesen Snippet immer wenn etwas nicht wie erwartet funktioniert - egal ob Runtime-Error, falsches Verhalten oder UI-Bug. Besonders hilfreich wenn du Fehlermeldungen aus der Console hast.',

    useCase:
      'Dein Login-Button triggert das onClick-Event zweimal, wodurch User doppelt eingeloggt werden. Du beschreibst das Problem, kopierst die Console-Logs, gibst die betroffene Datei an (LoginButton.tsx) und erkl√§rst dass onClick nur einmal ausgef√ºhrt werden soll.',

    fieldGuide: [
      {
        fieldId: 'bugTitle',
        explanation: 'Ein kurzer, pr√§gnanter Titel f√ºr den Bug',
        example: 'Button sendet onClick doppelt',
        tips:
          'Halte es kurz (max. 10 W√∂rter). Beschreibe das Symptom, nicht die Ursache',
      },
      {
        fieldId: 'problem',
        explanation:
          'Eine detaillierte Beschreibung was genau nicht funktioniert',
        example:
          'Wenn ich auf den Login-Button klicke, wird das onClick-Event zweimal getriggert. In der Console erscheinen zwei "Login attempted" Logs.',
        tips:
          'Beschreibe was du getan hast (Steps to reproduce) und was dann passiert ist',
      },
      {
        fieldId: 'errorMessage',
        explanation:
          'Die exakte Fehlermeldung aus Browser Console, Terminal oder Logs',
        example: 'Warning: Cannot update a component while rendering a different component',
        tips:
          'Kopiere die komplette Fehlermeldung inkl. Stack Trace. Auch Warnings k√∂nnen wichtig sein!',
      },
      {
        fieldId: 'affectedFiles',
        explanation: 'Alle Dateien die mit dem Bug zu tun haben k√∂nnten',
        example: 'src/components/LoginButton.tsx',
        tips:
          'Jede Datei in eine neue Zeile. Wenn unsicher: Liste alle verd√§chtigen Dateien auf',
      },
      {
        fieldId: 'expectedBehavior',
        explanation: 'Was sollte stattdessen passieren? Wie sollte es korrekt funktionieren?',
        example:
          'Der onClick-Handler sollte nur einmal pro Klick ausgef√ºhrt werden. User sollte nur ein "Login attempted" Log sehen.',
        tips:
          'Sei spezifisch. Wenn m√∂glich: Beschreibe auch Edge Cases',
      },
      {
        fieldId: 'additionalInfo',
        explanation: 'Weitere Hinweise: Browser, Umgebung, Steps to reproduce, etc.',
        example:
          '- Tritt nur in Chrome auf\n- Funktioniert in Development, aber nicht in Production\n- Bug seit gestern',
        tips:
          'Jede Info kann helfen! Browser-Version, wann es aufgetreten ist, ob es reproduzierbar ist',
      },
    ],
  },

  // 5. Refactoring
  {
    id: 'crefactor',
    name: 'Refactoring',
    description: 'Template f√ºr Refactoring-Anfragen',
    category: 'refactor',
    icon: '‚ôªÔ∏è',
    template: `[Kontext: DEVELOPMENT.md - Modulare Architektur]

‚ôªÔ∏è Refactoring: {{refactorTarget}}

Aktueller Code:
{{currentCode}}

Ziel:
{{goal}}

Betroffene Dateien:
‚úÖ {{affectedFiles}}
‚ùå Keine anderen Dateien √§ndern!

Wichtig:
- Funktionalit√§t muss identisch bleiben
- Tests m√ºssen weiterhin laufen
- Modulare Struktur beibehalten

{{additionalConstraints}}`,
    placeholders: [
      {
        id: 'refactorTarget',
        label: 'Refactoring-Ziel',
        type: 'text',
        required: true,
        placeholder: 'Was wird refactored?',
      },
      {
        id: 'currentCode',
        label: 'Aktueller Code/Zustand',
        type: 'textarea',
        required: true,
        placeholder: 'Beschreibung des aktuellen Codes',
      },
      {
        id: 'goal',
        label: 'Ziel',
        type: 'textarea',
        required: true,
        placeholder: 'Was soll erreicht werden?',
      },
      {
        id: 'affectedFiles',
        label: 'Betroffene Dateien',
        type: 'multiline',
        required: true,
        placeholder: 'src/components/Dashboard.tsx',
      },
      {
        id: 'additionalConstraints',
        label: 'Weitere Einschr√§nkungen',
        type: 'multiline',
        required: false,
        placeholder: '- Keine Breaking Changes\n- API beibehalten',
      },
    ],

    longDescription:
      'Dieser Snippet hilft beim Code-Refactoring ohne die Funktionalit√§t zu √§ndern. Er stellt sicher, dass Claude den Code verbessert (z.B. Lesbarkeit, Performance, Struktur) w√§hrend alles weiterhin funktioniert. Betont die Wichtigkeit von Tests und modularer Struktur.',

    whenToUse:
      'Nutze diesen Snippet wenn Code un√ºbersichtlich, dupliziert oder schwer wartbar ist. Perfekt f√ºr: Code vereinfachen, Funktionen extrahieren, Performance optimieren. NICHT f√ºr Feature-√Ñnderungen oder Bug-Fixes.',

    useCase:
      'Dein Dashboard.tsx ist auf 500 Zeilen angewachsen und enth√§lt mehrere useEffects und komplexe State-Logik. Du m√∂chtest die Komponente vereinfachen, Logik in Custom Hooks extrahieren und die Datei auf unter 200 Zeilen bringen - ohne dass sich das UI-Verhalten √§ndert.',

    fieldGuide: [
      {
        fieldId: 'refactorTarget',
        explanation: 'Was genau soll refactored werden?',
        example: 'Dashboard Komponente - State Management vereinfachen',
        tips:
          'Sei spezifisch. Beschreibe WELCHEN Aspekt du verbessern m√∂chtest',
      },
      {
        fieldId: 'currentCode',
        explanation:
          'Beschreibe den aktuellen Zustand des Codes oder nenne die Datei',
        example:
          'src/components/Dashboard.tsx hat 500 Zeilen, 8 useStates, 5 useEffects und ist schwer zu lesen',
        tips:
          'Erkl√§re was aktuell problematisch ist. Warum braucht es Refactoring?',
      },
      {
        fieldId: 'goal',
        explanation: 'Was m√∂chtest du erreichen? Wie soll der Code danach aussehen?',
        example:
          'State-Logik in Custom Hooks extrahieren, useEffects zusammenfassen, Code auf <200 Zeilen reduzieren',
        tips:
          'Konkrete, messbare Ziele. "Besser lesbar" ist vage, "Auf 200 Zeilen reduzieren" ist konkret',
      },
      {
        fieldId: 'affectedFiles',
        explanation: 'Welche Dateien d√ºrfen ge√§ndert werden?',
        example: 'src/components/Dashboard.tsx\nsrc/hooks/useDashboardData.ts (neue Datei)',
        tips:
          'Erw√§hne auch neue Dateien die erstellt werden d√ºrfen (z.B. neue Hooks)',
      },
      {
        fieldId: 'additionalConstraints',
        explanation:
          'Weitere Einschr√§nkungen oder Anforderungen f√ºr das Refactoring',
        example:
          '- Keine Breaking Changes f√ºr Parent-Components\n- Props-Interface beibehalten\n- Tests d√ºrfen nicht kaputt gehen',
        tips:
          'Wichtig: Erw√§hne was NICHT ge√§ndert werden darf (API, Props, etc.)',
      },
    ],
  },

  // 6. Component Creation
  {
    id: 'ccomponent',
    name: 'Komponenten-Erstellung',
    description: 'Detailliertes Template f√ºr neue Komponenten',
    category: 'component',
    icon: 'üß©',
    template: `üìã Siehe DEVELOPMENT.md!

Aufgabe: Erstelle {{componentName}} Komponente

Props:
\`\`\`typescript
interface {{componentName}}Props {
  {{propsDefinition}}
}
\`\`\`

Features:
- {{feature1}}
- {{feature2}}

Pfad: src/components/{{componentName}}/
Dateien:
  ‚îú‚îÄ‚îÄ {{componentName}}.tsx
  ‚îú‚îÄ‚îÄ {{componentName}}.types.ts
  ‚îú‚îÄ‚îÄ {{componentName}}.test.ts
  ‚îî‚îÄ‚îÄ index.ts

Style: {{styleFramework}}

{{additionalRequirements}}`,
    placeholders: [
      {
        id: 'componentName',
        label: 'Komponenten-Name',
        type: 'text',
        required: true,
        placeholder: 'z.B. Button, Card, Modal',
      },
      {
        id: 'propsDefinition',
        label: 'Props Definition',
        type: 'multiline',
        required: true,
        placeholder: 'label: string;\nonClick: () => void;',
      },
      {
        id: 'feature1',
        label: 'Feature 1',
        type: 'text',
        required: true,
        placeholder: 'Erste Funktionalit√§t',
      },
      {
        id: 'feature2',
        label: 'Feature 2',
        type: 'text',
        required: false,
        placeholder: 'Zweite Funktionalit√§t (optional)',
      },
      {
        id: 'styleFramework',
        label: 'Style Framework',
        type: 'select',
        required: true,
        options: ['Tailwind', 'CSS Modules', 'Styled Components'],
        defaultValue: 'Tailwind',
      },
      {
        id: 'additionalRequirements',
        label: 'Zus√§tzliche Anforderungen',
        type: 'multiline',
        required: false,
        placeholder: '- Dark Mode Support\n- Responsive Design',
      },
    ],

    longDescription:
      'Der detaillierteste Snippet f√ºr React-Komponenten. Er legt den kompletten Contract fest: Props mit TypeScript, Features, Styling-Framework und Ordner-Struktur. Perfekt wenn du genau wei√üt wie die Komponente aussehen soll und Claude eine pr√§zise Spec geben m√∂chtest.',

    whenToUse:
      'Verwende diesen Snippet f√ºr wiederverwendbare UI-Komponenten (Buttons, Cards, Modals, Forms). Ideal wenn du die Props-Struktur bereits kennst. Nicht geeignet f√ºr einfache Utility-Funktionen oder Services.',

    useCase:
      'Du baust eine Design-System-Komponente f√ºr dein Team. Du brauchst einen wiederverwendbaren Modal-Dialog mit Props wie isOpen, onClose, title, children. Du definierst Features (Overlay-Click schlie√üt, Escape-Key, animierte √úberg√§nge) und Claude erstellt die komplette Komponente inkl. TypeScript Types und Tests.',

    fieldGuide: [
      {
        fieldId: 'componentName',
        explanation: 'Name der Komponente in PascalCase',
        example: 'Modal',
        tips:
          'Verwende beschreibende, kurze Namen. Singular (Button, nicht Buttons)',
      },
      {
        fieldId: 'propsDefinition',
        explanation:
          'TypeScript Props Definition - eine Prop pro Zeile',
        example:
          'isOpen: boolean;\nonClose: () => void;\ntitle: string;\nchildren: React.ReactNode;',
        tips:
          'Nutze TypeScript Types. Optionale Props mit ?. Funktionen als () => void',
      },
      {
        fieldId: 'feature1',
        explanation: 'Die wichtigste Funktionalit√§t der Komponente',
        example: 'Click au√üerhalb des Modals schlie√üt es',
        tips:
          'Beschreibe User-Interaktionen und Verhalten',
      },
      {
        fieldId: 'feature2',
        explanation: 'Eine weitere Funktionalit√§t (optional)',
        example: 'Escape-Taste schlie√üt das Modal',
        tips:
          'Denke an Accessibility und Edge Cases',
      },
      {
        fieldId: 'styleFramework',
        explanation: 'Welches Styling-Framework soll verwendet werden?',
        example: 'Tailwind',
        tips:
          'W√§hle aus: Tailwind (Utility-First), CSS Modules (Scoped CSS), Styled Components (CSS-in-JS)',
      },
      {
        fieldId: 'additionalRequirements',
        explanation: 'Weitere Anforderungen wie Accessibility, Responsive Design, etc.',
        example:
          '- Dark Mode Support\n- Responsive (Full-Screen auf Mobile)\n- Keyboard Navigation\n- Focus Trap',
        tips:
          'Denke an: Accessibility (ARIA), Responsive Design, Performance, Edge Cases',
      },
    ],
  },

  // 7. API Integration
  {
    id: 'capi',
    name: 'API Integration',
    description: 'Template f√ºr API-Integrationen',
    category: 'api',
    icon: 'üîå',
    template: `[Kontext: DEVELOPMENT.md]

üîå API Integration: {{apiName}}

Endpoint: {{endpoint}}
Methode: {{method}}

Request:
\`\`\`typescript
{{requestType}}
\`\`\`

Expected Response:
\`\`\`typescript
{{responseType}}
\`\`\`

Erstelle:
- Service-Funktion in src/services/{{apiName}}/
- TypeScript Types
- Error Handling
- Optional: Custom Hook f√ºr Component-Nutzung

Scope: Nur neue Dateien, keine bestehenden √§ndern!

{{additionalNotes}}`,
    placeholders: [
      {
        id: 'apiName',
        label: 'API Name',
        type: 'text',
        required: true,
        placeholder: 'z.B. userService, productAPI',
      },
      {
        id: 'endpoint',
        label: 'Endpoint URL',
        type: 'text',
        required: true,
        placeholder: 'https://api.example.com/endpoint',
      },
      {
        id: 'method',
        label: 'HTTP Methode',
        type: 'select',
        required: true,
        options: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
      },
      {
        id: 'requestType',
        label: 'Request Type',
        type: 'textarea',
        required: false,
        placeholder: 'interface Request { id: string }',
      },
      {
        id: 'responseType',
        label: 'Response Type',
        type: 'textarea',
        required: true,
        placeholder: 'interface Response { data: any }',
      },
      {
        id: 'additionalNotes',
        label: 'Zus√§tzliche Hinweise',
        type: 'multiline',
        required: false,
        placeholder: '- Caching\n- Retry Logic',
      },
    ],

    longDescription:
      'Dieser Snippet hilft dir dabei, API-Calls sauber zu integrieren. Er erstellt Service-Funktionen mit korrekten TypeScript Types, Error Handling und optional React Hooks. Folgt Best Practices wie Separation of Concerns (API-Logik getrennt von Components).',

    whenToUse:
      'Verwende diesen Snippet immer wenn du einen neuen API-Endpoint anbinden m√∂chtest. Perfekt f√ºr REST APIs. Funktioniert f√ºr GET, POST, PUT, DELETE, PATCH. Nicht geeignet f√ºr WebSockets oder GraphQL.',

    useCase:
      'Deine App soll User-Daten von einem Backend laden. Du hast einen GET-Endpoint /api/users/:id der ein User-Objekt zur√ºckgibt. Du definierst Request (userId) und Response (User Interface) und Claude erstellt einen userService mit getUser()-Funktion plus einen useUser() Hook f√ºr React Components.',

    fieldGuide: [
      {
        fieldId: 'apiName',
        explanation: 'Ein beschreibender Name f√ºr den Service',
        example: 'userService',
        tips:
          'Verwende camelCase. Suffix "Service" oder "API" ist √ºblich',
      },
      {
        fieldId: 'endpoint',
        explanation: 'Die vollst√§ndige URL des API-Endpoints',
        example: 'https://api.example.com/users/:id',
        tips:
          'Inkl. Platzhalter wie :id. Basis-URL kann in .env definiert werden',
      },
      {
        fieldId: 'method',
        explanation: 'Die HTTP-Methode f√ºr diesen Request',
        example: 'GET',
        tips:
          'GET=Lesen, POST=Erstellen, PUT/PATCH=Updaten, DELETE=L√∂schen',
      },
      {
        fieldId: 'requestType',
        explanation:
          'TypeScript Interface f√ºr Request-Daten (Body, Params, Query)',
        example: 'interface GetUserRequest {\n  userId: string;\n}',
        tips:
          'Bei GET: Path/Query Params. Bei POST/PUT: Request Body. Kann leer sein',
      },
      {
        fieldId: 'responseType',
        explanation:
          'TypeScript Interface f√ºr die erwartete API-Response',
        example:
          'interface User {\n  id: string;\n  name: string;\n  email: string;\n}',
        tips:
          'Orientiere dich an der API-Dokumentation. Nutze optionale Felder (?) wo n√∂tig',
      },
      {
        fieldId: 'additionalNotes',
        explanation:
          'Besondere Anforderungen: Authentication, Caching, Retry Logic, etc.',
        example:
          '- Bearer Token Authentication\n- Cache f√ºr 5 Minuten\n- Retry 3x bei Timeout',
        tips:
          'Erw√§hne: Auth-Type, Rate Limiting, Caching-Strategie, Error-Handling-W√ºnsche',
      },
    ],
  },

  // 8. Test Creation
  {
    id: 'ctest',
    name: 'Test-Erstellung',
    description: 'Template f√ºr Test-Erstellung',
    category: 'test',
    icon: 'üß™',
    template: `[Kontext: DEVELOPMENT.md]

üß™ Test-Erstellung f√ºr: {{testTarget}}

Zu testende Datei:
{{targetFile}}

Test-Cases:
1. {{testCase1}}
2. {{testCase2}}
3. {{testCase3}}

Test-Framework: {{framework}}

Erstelle: {{targetFile}}.test.ts

{{additionalTestCases}}`,
    placeholders: [
      {
        id: 'testTarget',
        label: 'Test-Ziel',
        type: 'text',
        required: true,
        placeholder: 'Was wird getestet?',
      },
      {
        id: 'targetFile',
        label: 'Ziel-Datei',
        type: 'text',
        required: true,
        placeholder: 'src/components/Button/Button.tsx',
      },
      {
        id: 'testCase1',
        label: 'Test Case 1',
        type: 'text',
        required: true,
        placeholder: 'Erster Test-Fall',
      },
      {
        id: 'testCase2',
        label: 'Test Case 2',
        type: 'text',
        required: true,
        placeholder: 'Zweiter Test-Fall',
      },
      {
        id: 'testCase3',
        label: 'Test Case 3',
        type: 'text',
        required: false,
        placeholder: 'Dritter Test-Fall (optional)',
      },
      {
        id: 'framework',
        label: 'Test-Framework',
        type: 'select',
        required: true,
        options: ['Jest', 'Vitest', 'React Testing Library'],
        defaultValue: 'Vitest',
      },
      {
        id: 'additionalTestCases',
        label: 'Weitere Test-Cases',
        type: 'multiline',
        required: false,
        placeholder: '4. Edge Cases\n5. Error Handling',
      },
    ],

    longDescription:
      'Dieser Snippet erstellt umfassende Tests f√ºr deine Komponenten oder Funktionen. Er hilft dir dabei alle wichtigen Test-Cases zu definieren - von Happy Path bis Edge Cases. Claude generiert dann vollst√§ndige Test-Suites mit deinem bevorzugten Framework.',

    whenToUse:
      'Verwende diesen Snippet immer wenn du Tests f√ºr bestehenden oder neuen Code schreiben m√∂chtest. Ideal f√ºr Unit Tests, Component Tests und Integration Tests. Besonders wichtig nach Refactorings oder Bug-Fixes.',

    useCase:
      'Du hast eine LoginForm-Komponente gebaut und m√∂chtest sicherstellen dass sie robust ist. Du definierst Test-Cases: (1) Form rendert korrekt, (2) Validierung zeigt Fehler bei leeren Feldern, (3) onSubmit wird mit korrekten Daten aufgerufen, (4) Loading-State w√§hrend Submit. Claude erstellt eine vollst√§ndige Test-Suite.',

    fieldGuide: [
      {
        fieldId: 'testTarget',
        explanation: 'Was soll getestet werden? Komponente, Funktion oder Feature',
        example: 'LoginForm Komponente',
        tips:
          'Sei spezifisch. "Button" ist vage, "LoginForm Submit Behavior" ist besser',
      },
      {
        fieldId: 'targetFile',
        explanation: 'Der Pfad zur Datei die getestet werden soll',
        example: 'src/components/LoginForm/LoginForm.tsx',
        tips:
          'Relativer Pfad vom Projekt-Root. Tests werden als .test.ts neben der Datei erstellt',
      },
      {
        fieldId: 'testCase1',
        explanation: 'Der erste und wichtigste Test-Case (meist Happy Path)',
        example: 'Rendert alle Form-Felder (Email, Password, Submit-Button)',
        tips:
          'Happy Path zuerst! Was sollte im Normalfall funktionieren?',
      },
      {
        fieldId: 'testCase2',
        explanation: 'Der zweite Test-Case',
        example: 'Zeigt Validierungs-Fehler bei leerem Email-Feld',
        tips:
          'Teste User-Interaktionen und Validierung',
      },
      {
        fieldId: 'testCase3',
        explanation: 'Ein dritter Test-Case (optional)',
        example: 'onSubmit wird mit korrekten Daten aufgerufen',
        tips:
          'Teste Props, Callbacks und State-Changes',
      },
      {
        fieldId: 'framework',
        explanation: 'Welches Test-Framework wird in deinem Projekt verwendet?',
        example: 'Vitest',
        tips:
          'Vitest ist modern und schnell. Jest ist weit verbreitet. React Testing Library f√ºr Component-Tests',
      },
      {
        fieldId: 'additionalTestCases',
        explanation:
          'Weitere Test-Cases: Edge Cases, Error Handling, Accessibility',
        example:
          '4. Disabled State verhindert Submit\n5. Loading State zeigt Spinner\n6. Error von API wird angezeigt',
        tips:
          'Denke an: Edge Cases, Error States, Loading States, Accessibility (ARIA), Keyboard Navigation',
      },
    ],
  },

  // 9. Documentation
  {
    id: 'cdocs',
    name: 'Dokumentation',
    description: 'Template f√ºr Dokumentations-Anfragen',
    category: 'docs',
    icon: 'üìö',
    template: `üìö Dokumentation: {{docTitle}}

Aufgabe: Erstelle/Erweitere Dokumentation f√ºr {{docTarget}}

Inhalte:
- √úbersicht/Zweck
- Installation/Setup (falls relevant)
- API/Props-Dokumentation
- Verwendungsbeispiele
- {{additionalContent}}

Format: {{format}}

{{additionalNotes}}`,
    placeholders: [
      {
        id: 'docTitle',
        label: 'Dokumentations-Titel',
        type: 'text',
        required: true,
        placeholder: 'z.B. Button Component API',
      },
      {
        id: 'docTarget',
        label: 'Dokumentations-Ziel',
        type: 'text',
        required: true,
        placeholder: 'Was wird dokumentiert?',
      },
      {
        id: 'additionalContent',
        label: 'Zus√§tzliche Inhalte',
        type: 'text',
        required: false,
        placeholder: 'Weitere Anforderungen',
      },
      {
        id: 'format',
        label: 'Format',
        type: 'select',
        required: true,
        options: ['JSDoc', 'Markdown', 'README'],
        defaultValue: 'Markdown',
      },
      {
        id: 'additionalNotes',
        label: 'Zus√§tzliche Hinweise',
        type: 'multiline',
        required: false,
        placeholder: 'Weitere Informationen...',
      },
    ],

    longDescription:
      'Dieser Snippet erstellt professionelle Dokumentation f√ºr deine Components, APIs oder Features. Er strukturiert die Doku in sinnvolle Abschnitte (Zweck, API, Beispiele) und w√§hlt das passende Format (JSDoc f√ºr Inline-Code, Markdown f√ºr READMEs).',

    whenToUse:
      'Verwende diesen Snippet wenn du Code f√ºr andere (oder dein zuk√ºnftiges Ich) dokumentieren m√∂chtest. Besonders wichtig f√ºr wiederverwendbare Komponenten, Public APIs und komplexe Features. Am besten direkt nach der Implementierung.',

    useCase:
      'Du hast eine DataTable-Komponente mit vielen Props und Features gebaut. Dein Team soll diese Komponente nutzen k√∂nnen. Du erstellst eine README.md mit: √úbersicht (was kann die Komponente), Props-API (alle Props erkl√§rt), Code-Beispiele (Basis-Usage, Advanced Features) und Design-Entscheidungen.',

    fieldGuide: [
      {
        fieldId: 'docTitle',
        explanation: 'Ein beschreibender Titel f√ºr die Dokumentation',
        example: 'DataTable Component Documentation',
        tips:
          'Mache klar was dokumentiert wird. "Component API" oder "User Guide" als Suffix',
      },
      {
        fieldId: 'docTarget',
        explanation: 'Was genau wird dokumentiert? Komponente, Service, Feature?',
        example: 'DataTable Komponente',
        tips:
          'Sei spezifisch. Erw√§hne auch den Pfad falls relevant',
      },
      {
        fieldId: 'additionalContent',
        explanation: 'Weitere Abschnitte die in der Doku erscheinen sollen',
        example: 'Performance-Tipps, Accessibility-Features, Migration Guide',
        tips:
          'Denke an: Best Practices, Troubleshooting, FAQ, Migration, Performance',
      },
      {
        fieldId: 'format',
        explanation: 'In welchem Format soll die Doku geschrieben werden?',
        example: 'Markdown',
        tips:
          'JSDoc f√ºr Inline-Code-Kommentare, Markdown f√ºr README.md, README f√ºr komplette Projekt-Dokumentation',
      },
      {
        fieldId: 'additionalNotes',
        explanation: 'Besondere Anforderungen oder Stil-Vorgaben',
        example:
          '- Nutze Code-Beispiele mit TypeScript\n- Erkl√§re Props-Defaults\n- Zeige h√§ufige Fehler',
        tips:
          'Zielgruppe erw√§hnen (Junior vs. Senior Devs), Stil-Vorgaben (formal vs. casual)',
      },
    ],
  },

  // 10. Quick Task
  {
    id: 'ctask',
    name: 'Quick Task',
    description: 'Kurzes Template f√ºr schnelle Aufgaben',
    category: 'other',
    icon: '‚ö°',
    template: `[DEVELOPMENT.md]

{{task}}

Scope: {{scope}}`,
    placeholders: [
      {
        id: 'task',
        label: 'Aufgabe',
        type: 'textarea',
        required: true,
        placeholder: 'Was soll gemacht werden?',
      },
      {
        id: 'scope',
        label: 'Scope',
        type: 'text',
        required: true,
        placeholder: 'Welche Dateien?',
      },
    ],

    longDescription:
      'Der schnellste Weg f√ºr simple, klare Aufgaben. Minimalistisch aber effektiv. Perfekt wenn du keine lange Beschreibung brauchst und Claude einfach nur eine kleine √Ñnderung machen soll. Referenziert trotzdem DEVELOPMENT.md f√ºr Kontext.',

    whenToUse:
      'Verwende diesen Snippet f√ºr triviale Aufgaben die in 1-2 S√§tzen erkl√§rt werden k√∂nnen. Ideal f√ºr: Farben √§ndern, Text anpassen, kleine CSS-Fixes. Nicht geeignet f√ºr komplexe Features oder wenn du mehrere Anforderungen hast.',

    useCase:
      'Du m√∂chtest die Farbe des Primary-Buttons von Blau zu Gr√ºn √§ndern. Task: "√Ñndere Button-Farbe von bg-blue-500 zu bg-green-500", Scope: "src/components/Button/Button.tsx". Fertig in 30 Sekunden.',

    fieldGuide: [
      {
        fieldId: 'task',
        explanation:
          'Eine kurze, klare Beschreibung was gemacht werden soll',
        example: '√Ñndere die Hintergrundfarbe des Headers von wei√ü zu grau',
        tips:
          'Maximal 2-3 S√§tze. Verwende Imperative (√Ñndere, F√ºge hinzu, Entferne)',
      },
      {
        fieldId: 'scope',
        explanation: 'Welche Datei(en) sollen ge√§ndert werden?',
        example: 'src/components/Header/Header.tsx',
        tips:
          'Je spezifischer desto besser. Mehrere Dateien mit Komma trennen',
      },
    ],
  },

  // 11. Multi-Step Task
  {
    id: 'cmulti',
    name: 'Multi-Step Task',
    description: 'Template f√ºr mehrstufige Aufgaben',
    category: 'other',
    icon: 'üìã',
    template: `[Kontext: DEVELOPMENT.md - Modulare Architektur]

üìã Mehrstufige Aufgabe: {{taskTitle}}

Schritt 1: {{step1}}
Scope: {{scope1}}

Schritt 2: {{step2}}
Scope: {{scope2}}

Schritt 3: {{step3}}
Scope: {{scope3}}

WICHTIG:
- Arbeite Schritt f√ºr Schritt
- Warte auf Best√§tigung nach jedem Schritt
- Keine √Ñnderungen au√üerhalb des definierten Scope

Lass uns mit Schritt 1 beginnen!

{{additionalSteps}}`,
    placeholders: [
      {
        id: 'taskTitle',
        label: 'Task-Titel',
        type: 'text',
        required: true,
        placeholder: 'Gesamtziel der Aufgabe',
      },
      {
        id: 'step1',
        label: 'Schritt 1',
        type: 'text',
        required: true,
        placeholder: 'Erster Schritt',
      },
      {
        id: 'scope1',
        label: 'Scope Schritt 1',
        type: 'text',
        required: true,
        placeholder: 'Betroffene Dateien',
      },
      {
        id: 'step2',
        label: 'Schritt 2',
        type: 'text',
        required: true,
        placeholder: 'Zweiter Schritt',
      },
      {
        id: 'scope2',
        label: 'Scope Schritt 2',
        type: 'text',
        required: true,
        placeholder: 'Betroffene Dateien',
      },
      {
        id: 'step3',
        label: 'Schritt 3',
        type: 'text',
        required: false,
        placeholder: 'Dritter Schritt (optional)',
      },
      {
        id: 'scope3',
        label: 'Scope Schritt 3',
        type: 'text',
        required: false,
        placeholder: 'Betroffene Dateien',
      },
      {
        id: 'additionalSteps',
        label: 'Weitere Schritte',
        type: 'multiline',
        required: false,
        placeholder: 'Schritt 4: ...\nScope: ...',
      },
    ],

    longDescription:
      'Dieser Snippet ist perfekt f√ºr komplexe Aufgaben die in mehrere logische Schritte unterteilt werden m√ºssen. Er hilft dabei gro√üe Features √ºbersichtlich zu planen und Schritt f√ºr Schritt umzusetzen. Claude wartet nach jedem Schritt auf deine Best√§tigung bevor es weitergeht.',

    whenToUse:
      'Verwende diesen Snippet f√ºr gro√üe Features die mehrere Komponenten oder Module betreffen. Ideal wenn du Kontrolle √ºber jeden Schritt haben m√∂chtest. Nicht n√∂tig f√ºr simple Aufgaben die in einem Rutsch erledigt werden k√∂nnen.',

    useCase:
      'Du baust ein User-Authentication-System. Schritt 1: Login-Form-Komponente erstellen. Schritt 2: Auth-Service mit API-Calls. Schritt 3: Auth-Context f√ºr globalen State. Schritt 4: Protected Routes implementieren. Nach jedem Schritt kannst du testen und Feedback geben bevor es weitergeht.',

    fieldGuide: [
      {
        fieldId: 'taskTitle',
        explanation: 'Das √ºbergeordnete Ziel - was soll am Ende erreicht sein?',
        example: 'User Authentication System implementieren',
        tips:
          'W√§hle einen Namen der das Gesamtfeature beschreibt',
      },
      {
        fieldId: 'step1',
        explanation: 'Der erste Schritt der Implementierung',
        example: 'Erstelle LoginForm Komponente',
        tips:
          'Start mit Grundlagen/Dependencies. Baue von unten nach oben auf',
      },
      {
        fieldId: 'scope1',
        explanation: 'Welche Dateien werden in Schritt 1 erstellt/ge√§ndert?',
        example: 'src/components/LoginForm/',
        tips:
          'Sei spezifisch. Auch neue Ordner erw√§hnen',
      },
      {
        fieldId: 'step2',
        explanation: 'Der zweite Schritt',
        example: 'Erstelle Auth-Service f√ºr API-Calls',
        tips:
          'Logische Reihenfolge: Components ‚Üí Services ‚Üí State ‚Üí Integration',
      },
      {
        fieldId: 'scope2',
        explanation: 'Scope f√ºr Schritt 2',
        example: 'src/services/auth/',
        tips:
          'Jeder Schritt sollte isoliert sein',
      },
      {
        fieldId: 'step3',
        explanation: 'Der dritte Schritt (optional)',
        example: 'Erstelle Auth-Context f√ºr globalen State',
        tips:
          'Nicht mehr als 5 Schritte. Sonst Aufgabe weiter splitten',
      },
      {
        fieldId: 'scope3',
        explanation: 'Scope f√ºr Schritt 3',
        example: 'src/contexts/AuthContext/',
      },
      {
        fieldId: 'additionalSteps',
        explanation: 'Weitere Schritte falls n√∂tig',
        example:
          'Schritt 4: Protected Routes implementieren\nScope: src/routes/\n\nSchritt 5: Login in App.tsx integrieren\nScope: src/App.tsx',
        tips:
          'Format: "Schritt X: Beschreibung\\nScope: Dateien". Leere Zeile zwischen Schritten',
      },
    ],
  },

  // 12. Code Review
  {
    id: 'creview',
    name: 'Code Review',
    description: 'Template f√ºr Code-Review-Anfragen',
    category: 'other',
    icon: 'üëÄ',
    template: `üëÄ Code Review: {{reviewTitle}}

Datei: {{targetFile}}

Pr√ºfe auf:
- ‚úÖ Entspricht DEVELOPMENT.md Richtlinien
- ‚úÖ Modulare Struktur eingehalten
- ‚úÖ Single Responsibility
- ‚úÖ Type Safety
- ‚úÖ Keine ungewollten Abh√§ngigkeiten
- ‚úÖ {{additionalCriteria}}

Gib konstruktives Feedback mit Verbesserungsvorschl√§gen.

{{additionalNotes}}`,
    placeholders: [
      {
        id: 'reviewTitle',
        label: 'Review-Titel',
        type: 'text',
        required: true,
        placeholder: 'Was wird reviewed?',
      },
      {
        id: 'targetFile',
        label: 'Zu reviewende Datei',
        type: 'text',
        required: true,
        placeholder: 'src/components/Button/Button.tsx',
      },
      {
        id: 'additionalCriteria',
        label: 'Weitere Kriterien',
        type: 'text',
        required: false,
        placeholder: 'Zus√§tzliche Review-Kriterien',
      },
      {
        id: 'additionalNotes',
        label: 'Zus√§tzliche Hinweise',
        type: 'multiline',
        required: false,
        placeholder: 'Besondere Schwerpunkte...',
      },
    ],

    longDescription:
      'Dieser Snippet l√§sst Claude deinen Code professionell reviewen. Er pr√ºft auf Best Practices, Architektur-Konformit√§t, Code-Qualit√§t und potenzielle Probleme. Du erh√§ltst konstruktives Feedback mit konkreten Verbesserungsvorschl√§gen - wie bei einem Code Review mit einem Senior Developer.',

    whenToUse:
      'Verwende diesen Snippet bevor du gr√∂√üere Changes committst, nach dem Implementieren neuer Features oder wenn du unsicher bist ob dein Code sauber ist. Besonders wertvoll f√ºr Learning und Quality Assurance.',

    useCase:
      'Du hast eine komplexe Dashboard-Komponente gebaut und m√∂chtest sicherstellen dass sie den Best Practices entspricht. Claude reviewed den Code und findet: (1) Zu viele useEffects ‚Üí zusammenfassen, (2) Props nicht optimal typisiert, (3) Komponente zu gro√ü ‚Üí in Sub-Components aufteilen. Du kriegst konkrete Refactoring-Vorschl√§ge.',

    fieldGuide: [
      {
        fieldId: 'reviewTitle',
        explanation: 'Was soll reviewed werden? Komponente, Feature oder Datei',
        example: 'Dashboard Komponente Code Quality',
        tips:
          'Sei beschreibend. Erw√§hne worauf du besonderen Wert legst',
      },
      {
        fieldId: 'targetFile',
        explanation: 'Pfad zur Datei die reviewed werden soll',
        example: 'src/pages/Dashboard/Dashboard.tsx',
        tips:
          'Nur eine Datei pro Review f√ºr fokussiertes Feedback',
      },
      {
        fieldId: 'additionalCriteria',
        explanation: 'Zus√§tzliche Pr√ºfpunkte neben den Standard-Kriterien',
        example: 'Performance Optimierungen, Accessibility',
        tips:
          'Erw√§hne spezielle Schwerpunkte: Performance, Security, Accessibility, Tests',
      },
      {
        fieldId: 'additionalNotes',
        explanation:
          'Kontext oder besondere Bereiche auf die Claude achten soll',
        example:
          '- State Management wirkt kompliziert\n- Sind die useEffects optimal?\n- Kann Komponente kleiner sein?',
        tips:
          'Teile deine Bedenken. Erw√§hne was du bereits vermutest verbessert werden k√∂nnte',
      },
    ],
  },

  // 13. UI/GUI Design Analyse
  {
    id: 'cuidesign',
    name: 'UI/GUI Design Analyse',
    description:
      'Lass Claude deine UI analysieren und kreative Verbesserungsvorschl√§ge machen',
    category: 'other',
    icon: 'üé®',
    template: `[Kontext: DEVELOPMENT.md]

üé® UI/GUI Design Analyse & Vorschl√§ge

Analysiere bitte die Benutzeroberfl√§che in folgendem Ordner/Komponente:
{{targetPath}}

WICHTIG: Sei kreativ und denke out-of-the-box!

Analysiere und gib mir Vorschl√§ge zu:

1. **Erste Eindr√ºcke:**
   - Was f√§llt dir sofort auf (positiv & negativ)?
   - Wie intuitiv ist die Bedienung?
   - Gibt es verwirrende Elemente?

2. **Moderne UI-Trends:**
   - Welche aktuellen Design-Trends k√∂nnten hier passen?
   - Glassmorphism, Neumorphism, Brutal Design?
   - Micro-Animations oder Transitions fehlen?

3. **User Experience:**
   - Wo k√∂nnten User stolpern?
   - Welche Interaktionen fehlen (Hover, Focus, Loading States)?
   - Feedback f√ºr User-Aktionen ausreichend?

4. **Innovative Ideen:**
   - {{innovationFocus}}
   - Welche ungew√∂hnlichen UI-Patterns k√∂nnten hier funktionieren?
   - Inspirationen aus anderen erfolgreichen Apps?

5. **Konkrete Verbesserungen:**
   - Priorisiere 3-5 Quick Wins (einfach umsetzbar, gro√üer Impact)
   - 2-3 gr√∂√üere Verbesserungen (mehr Aufwand, aber lohnenswert)

Bitte sei spezifisch mit Code-Beispielen oder konkreten Design-Beschreibungen!`,
    placeholders: [
      {
        id: 'targetPath',
        label: 'Ziel-Ordner oder Komponente',
        type: 'text',
        required: true,
        placeholder: 'z.B. src/components/Dashboard/ oder src/pages/Home.tsx',
      },
      {
        id: 'innovationFocus',
        label: 'Innovations-Fokus (optional)',
        type: 'text',
        required: false,
        placeholder:
          'z.B. "Gamification-Elemente" oder "Accessibility-First"',
        defaultValue: '√úberrasche mich mit kreativen Ideen',
      },
    ],

    longDescription:
      'Dieser Snippet l√§sst Claude als Design-Consultant deine Benutzeroberfl√§che analysieren. Er schaut auf UX, moderne Design-Trends, Usability und gibt kreative Verbesserungsvorschl√§ge. Perfekt um frischen Wind in dein UI zu bringen oder blinde Flecken zu entdecken.',

    whenToUse:
      'Verwende diesen Snippet wenn dein UI funktioniert aber noch nicht "wow" ist. Ideal nach dem MVP wenn du Verbesserungen suchst. Auch gut f√ºr zweite Meinungen zu Design-Entscheidungen. Nicht sinnvoll f√ºr rein funktionale Bugs.',

    useCase:
      'Dein Dashboard funktioniert technisch einwandfrei, sieht aber langweilig aus. Claude analysiert die UI und schl√§gt vor: (1) Glassmorphism-Effekte f√ºr Cards, (2) Hover-Animationen f√ºr interaktive Elemente, (3) Loading-Skeletons statt Spinner, (4) Micro-Interactions beim Datenladen. Plus konkrete Tailwind-Code-Beispiele.',

    fieldGuide: [
      {
        fieldId: 'targetPath',
        explanation:
          'Welche Komponente oder welcher Ordner soll analysiert werden?',
        example: 'src/pages/Dashboard/',
        tips:
          'Kann eine einzelne Komponente oder ein kompletter Ordner sein',
      },
      {
        fieldId: 'innovationFocus',
        explanation:
          'In welche Richtung soll Claude denken? Gamification? Accessibility? Minimalism?',
        example: 'Gamification-Elemente einbauen',
        tips:
          'Optional. Lass es leer f√ºr allgemeine Vorschl√§ge. Oder gib eine Richtung vor: "Mobile-First", "Dark Mode", "Playful Design"',
      },
    ],
  },

  // 14. Farbdesign & Theme Vorschl√§ge
  {
    id: 'ccolor',
    name: 'Farbdesign & Theme Vorschl√§ge',
    description:
      'Lass Claude Farbpaletten und Theme-Konzepte f√ºr deine App vorschlagen',
    category: 'other',
    icon: 'üåà',
    template: `[Kontext: DEVELOPMENT.md]

üåà Farbdesign & Theme-Analyse

Analysiere das aktuelle Farbschema in:
{{targetPath}}

Projekt-Kontext:
- Zielgruppe: {{targetAudience}}
- Stimmung/Gef√ºhl: {{mood}}
- Branding: {{branding}}

Aufgaben:

1. **Analyse des aktuellen Farbschemas:**
   - Welche Farben werden verwendet?
   - Ist das Farbschema konsistent?
   - Funktioniert der Kontrast (Accessibility)?
   - Dark Mode vorhanden und gut umgesetzt?

2. **Farbpsychologie:**
   - Passen die aktuellen Farben zur Zielgruppe?
   - Welche Emotionen vermitteln sie?
   - Gibt es kulturelle Aspekte zu beachten?

3. **Neue Farbpaletten-Vorschl√§ge:**
   - Schlage 3 unterschiedliche Farbpaletten vor
   - F√ºr jede Palette: Primary, Secondary, Accent, Neutrals
   - Gib konkrete Hex-Codes und Tailwind-Classes
   - Erkl√§re die Rationale hinter jeder Palette

4. **Gradient & Effekte:**
   - Moderne Gradient-Kombinationen
   - Glassmorphism oder Neumorphism Effekte
   - Farbige Shadows oder Glows

5. **Theme-Varianten:**
   - Light/Dark Mode Optimierungen
   - Zus√§tzliche Themes (z.B. High Contrast, Sepia)?
   - Seasonal Themes (Weihnachten, etc.)?

6. **Implementierungs-Vorschl√§ge:**
   - Tailwind Config anpassen
   - CSS Custom Properties
   - Theme-Switching Strategie

Sei kreativ und wage auch unkonventionelle Vorschl√§ge!`,
    placeholders: [
      {
        id: 'targetPath',
        label: 'Zu analysierende Komponente/Datei',
        type: 'text',
        required: true,
        placeholder: 'z.B. src/App.tsx oder src/styles/',
      },
      {
        id: 'targetAudience',
        label: 'Zielgruppe',
        type: 'text',
        required: false,
        placeholder: 'z.B. Entwickler, Designer, Kinder, Business-User',
        defaultValue: 'Allgemein',
      },
      {
        id: 'mood',
        label: 'Gew√ºnschte Stimmung',
        type: 'text',
        required: false,
        placeholder: 'z.B. Professional, Playful, Minimalist, Bold',
        defaultValue: 'Modern und professionell',
      },
      {
        id: 'branding',
        label: 'Branding-Vorgaben (falls vorhanden)',
        type: 'text',
        required: false,
        placeholder: 'z.B. Firmenfarben, Logo-Farben',
        defaultValue: 'Keine speziellen Vorgaben',
      },
    ],

    longDescription:
      'Dieser Snippet ist dein pers√∂nlicher Color-Designer. Claude analysiert dein aktuelles Farbschema, ber√ºcksichtigt Farbpsychologie und Zielgruppe, und schl√§gt neue Paletten vor. Du bekommst konkrete Hex-Codes, Tailwind-Config und Implementierungs-Tipps. Perfekt f√ºr Rebranding oder wenn du mit deinen Farben unzufrieden bist.',

    whenToUse:
      'Verwende diesen Snippet wenn du mit deinem Farbschema unzufrieden bist oder einen kompletten Redesign planst. Auch gut f√ºr A/B-Testing verschiedener Paletten. Nicht n√∂tig f√ºr kleine Farb-Tweaks.',

    useCase:
      'Deine Produktivit√§ts-App nutzt aktuell Standard-Blau-T√∂ne, f√ºhlt sich aber generisch an. Du gibst als Zielgruppe "Kreative & Designer", Stimmung "Playful & Inspirierend" an. Claude schl√§gt 3 Paletten vor: (1) Warme Sonnenuntergangs-T√∂ne, (2) Lebendige Neon-Akzente, (3) Erdige Naturfarben - jeweils mit Hex-Codes und Erkl√§rung.',

    fieldGuide: [
      {
        fieldId: 'targetPath',
        explanation:
          'Wo befinden sich die Haupt-Styles deiner App?',
        example: 'src/App.tsx',
        tips:
          'Oft die Haupt-App-Datei oder ein styles/ Ordner',
      },
      {
        fieldId: 'targetAudience',
        explanation: 'F√ºr wen ist die App gedacht? Wer sind die Hauptnutzer?',
        example: 'Entwickler und Tech-affine User',
        tips:
          'Die Zielgruppe beeinflusst die Farbwahl stark. Kinder = bunt, Business = professionell',
      },
      {
        fieldId: 'mood',
        explanation:
          'Welches Gef√ºhl soll die App vermitteln?',
        example: 'Professional aber zug√§nglich',
        tips:
          'W√∂rter wie: Playful, Serious, Minimalist, Bold, Calm, Energetic, Luxurious, Friendly',
      },
      {
        fieldId: 'branding',
        explanation:
          'Gibt es Branding-Vorgaben? Firmenfarben? Logo-Farben?',
        example: 'Hauptfarbe ist #3B82F6 (Blau)',
        tips:
          'Wenn du Vorgaben hast, erw√§hne sie. Claude wird sie in die Paletten integrieren',
      },
    ],
  },

  // 15. Layout & Struktur Optimierung
  {
    id: 'clayout',
    name: 'Layout & Struktur Optimierung',
    description:
      'Kreative Layout-Ideen und Struktur-Verbesserungen f√ºr deine App',
    category: 'other',
    icon: 'üìê',
    template: `[Kontext: DEVELOPMENT.md]

üìê Layout & Struktur Analyse

Analysiere die Layout-Struktur in:
{{targetPath}}

Ger√§te-Fokus: {{deviceFocus}}
Besondere Anforderungen: {{specialRequirements}}

Analysiere und gib kreative Vorschl√§ge zu:

1. **Aktuelle Layout-Analyse:**
   - Wie ist das Layout strukturiert? (Grid, Flex, etc.)
   - Responsive Breakpoints sinnvoll gesetzt?
   - Hierarchie und visuelle Gewichtung klar?
   - Whitespace/Spacing konsistent?

2. **Layout-Pattern Vorschl√§ge:**
   - Welche modernen Layout-Patterns passen hier?
     * Bento Grid
     * Masonry Layout
     * Asymmetrische Layouts
     * Split-Screen
     * Card-Based
     * Dashboard-Style
   - Konkrete Umsetzungsideen mit Beispiel-Code

3. **Responsive Design:**
   - Mobile-First Optimierungen
   - Tablet-spezifische Layouts
   - Desktop: Wie nutzen wir den gro√üen Screen optimal?
   - Progressive Enhancement Ideen

4. **Navigation & Information Architecture:**
   - Ist die Navigation intuitiv?
   - Breadcrumbs sinnvoll?
   - Tabs vs. Accordion vs. Sidebar?
   - Wie finden User was sie suchen?

5. **Content-Organisation:**
   - Above the Fold: Was ist am wichtigsten?
   - Visual Hierarchy verbessern
   - F-Pattern oder Z-Pattern Optimierung
   - Scroll-Verhalten optimieren

6. **Innovative Layout-Ideen:**
   - Scroll-Triggered Animations
   - Parallax-Effekte
   - Sticky Elements strategisch einsetzen
   - Split-Scrolling
   - Horizontal Scrolling Sections

7. **Performance & UX:**
   - Loading States & Skeletons
   - Lazy Loading f√ºr gro√üe Layouts
   - Infinite Scroll vs. Pagination

Priorisiere Vorschl√§ge nach Impact und Umsetzungsaufwand!`,
    placeholders: [
      {
        id: 'targetPath',
        label: 'Zu analysierende Komponente/Seite',
        type: 'text',
        required: true,
        placeholder: 'z.B. src/pages/Dashboard.tsx oder src/App.tsx',
      },
      {
        id: 'deviceFocus',
        label: 'Ger√§te-Fokus',
        type: 'select',
        required: false,
        options: [
          'Alle Ger√§te',
          'Prim√§r Mobile',
          'Prim√§r Desktop',
          'Tablet-optimiert',
        ],
        defaultValue: 'Alle Ger√§te',
      },
      {
        id: 'specialRequirements',
        label: 'Besondere Anforderungen',
        type: 'textarea',
        required: false,
        placeholder:
          'z.B. "Muss viele Daten darstellen" oder "Gaming-Interface"',
      },
    ],

    longDescription:
      'Dieser Snippet ist dein Layout-Architekt. Claude analysiert deine aktuelle Layout-Struktur, schl√§gt moderne Layout-Patterns vor (Bento Grid, Masonry, etc.) und gibt Tipps zu Responsive Design und Content-Organisation. Du bekommst konkrete Code-Beispiele und Priorisierung nach Aufwand vs. Impact.',

    whenToUse:
      'Verwende diesen Snippet wenn dein Layout funktional ist aber nicht optimal. Ideal f√ºr Redesigns, Responsive-Probleme oder wenn du moderne Layout-Trends nutzen m√∂chtest. Auch gut wenn User sich in deiner App nicht zurechtfinden.',

    useCase:
      'Deine E-Commerce-Produktseite nutzt ein simples Grid. Claude schl√§gt vor: (1) Bento-Grid f√ºr dynamischere Layouts, (2) Sticky Add-to-Cart-Button auf Mobile, (3) Split-Screen mit Produktbild links (scrollbar) und Details rechts (sticky), (4) Masonry-Layout f√ºr Related Products. Plus Responsive-Strategie und Code-Beispiele.',

    fieldGuide: [
      {
        fieldId: 'targetPath',
        explanation: 'Welche Seite oder Komponente soll analysiert werden?',
        example: 'src/pages/ProductDetail.tsx',
        tips:
          'Am besten ganze Seiten oder gro√üe Komponenten (Dashboard, Landing Page)',
      },
      {
        fieldId: 'deviceFocus',
        explanation: 'Auf welche Ger√§te soll der Fokus liegen?',
        example: 'Alle Ger√§te',
        tips:
          '"Alle Ger√§te" f√ºr Mobile-First Approach. W√§hle spezifisch wenn du ein Ger√§t priorisierst',
      },
      {
        fieldId: 'specialRequirements',
        explanation:
          'Besondere Herausforderungen oder Anforderungen?',
        example: 'Muss viele Daten √ºbersichtlich darstellen ohne zu √ºberladen',
        tips:
          'Erw√§hne: Datenmengen, Performance-Anforderungen, Besonderheiten (Gaming, E-Commerce, Admin-Panel)',
      },
    ],
  },

  // 16. Neue Features & Komponenten Brainstorming
  {
    id: 'cfeatureideas',
    name: 'Neue Features & Komponenten Brainstorming',
    description:
      'Lass Claude innovative Feature-Ideen und neue Komponenten vorschlagen',
    category: 'other',
    icon: 'üí°',
    template: `[Kontext: DEVELOPMENT.md]

üí° Feature & Komponenten Brainstorming

Projekt-Kontext:
- Aktuelle App/Seite: {{currentContext}}
- User Pain Points: {{painPoints}}
- Inspiration: {{inspiration}}

Aufgabe: Sei kreativ und schlage innovative Features und Komponenten vor!

1. **Analyse der aktuellen App:**
   - Was macht die App gut?
   - Was fehlt noch?
   - Wo k√∂nnten User frustriert sein?

2. **Feature-Kategorien:**

   **A) Quick Wins (schnell umsetzbar):**
   - {{quickWinFocus}}
   - Welche kleinen Features w√ºrden gro√üe Freude bereiten?
   - Toast Notifications, Shortcuts, Easter Eggs?

   **B) Game Changers (gr√∂√üerer Aufwand, gro√üer Impact):**
   - Welche Features w√ºrden die App auf das n√§chste Level heben?
   - Innovative Interaktionen
   - Neue Haupt-Features

   **C) Delightful Details:**
   - Micro-Interactions
   - Animationen
   - Sound-Effekte
   - Haptic Feedback (Mobile)

3. **Neue Komponenten-Ideen:**
   - Welche wiederverwendbaren Komponenten fehlen?
   - Moderne UI-Komponenten Trends
   - Interaktive Widgets
   - Datenvisualisierung

4. **Inspiration aus anderen Apps:**
   - Was machen f√ºhrende Apps in diesem Bereich?
   - Welche Features k√∂nnte man adaptieren?
   - Wie kann man es noch besser machen?

5. **Futuristisch denken:**
   - AI-Integration (z.B. Autocomplete, Suggestions)
   - Voice Commands
   - Gestures
   - Collaborative Features
   - Real-time Updates

6. **Priorisierung:**
   Sortiere alle Vorschl√§ge nach:
   - üü¢ Quick Wins (niedrig h√§ngend Fr√ºchte)
   - üü° Medium Impact (mittlerer Aufwand, guter Return)
   - üî¥ Big Bets (hoher Aufwand, potenziell transformativ)

F√ºr jede Feature-Idee:
- Beschreibung & User-Benefit
- Technische Umsetzungs-Skizze
- Gesch√§tzter Aufwand
- Wow-Faktor (1-10)

Denk gro√ü und sei mutig mit Ideen! üöÄ`,
    placeholders: [
      {
        id: 'currentContext',
        label: 'Aktueller App-Kontext',
        type: 'textarea',
        required: true,
        placeholder: 'Beschreibe kurz was die App aktuell macht',
      },
      {
        id: 'painPoints',
        label: 'Bekannte User Pain Points',
        type: 'textarea',
        required: false,
        placeholder: 'Was frustriert User aktuell? Was fehlt?',
        defaultValue: 'Noch keine Pain Points bekannt',
      },
      {
        id: 'inspiration',
        label: 'Inspiration / Referenz-Apps',
        type: 'text',
        required: false,
        placeholder: 'z.B. "Notion, Figma, Linear"',
        defaultValue: 'Keine speziellen Vorbilder',
      },
      {
        id: 'quickWinFocus',
        label: 'Quick Win Fokus',
        type: 'text',
        required: false,
        placeholder: 'z.B. "Keyboard Shortcuts" oder "Better Feedback"',
        defaultValue: 'Allgemeine Verbesserungen',
      },
    ],

    longDescription:
      'Dieser Snippet ist dein Innovations-Workshop. Claude brainstormt kreative Feature-Ideen f√ºr deine App - von Quick Wins bis Game Changers. Er analysiert was fehlt, schaut was f√ºhrende Apps machen, und schl√§gt innovative Features vor. Jede Idee kommt mit User-Benefit, technischer Skizze, Aufwand und Wow-Faktor.',

    whenToUse:
      'Verwende diesen Snippet wenn du nicht wei√üt was als n√§chstes kommt. Perfekt nach MVP-Launch wenn du die Roadmap planst. Auch gut wenn du in einer Sackgasse steckst und frische Ideen brauchst. Nicht n√∂tig wenn du bereits konkrete Feature-Pl√§ne hast.',

    useCase:
      'Deine To-Do-App funktioniert gut, aber du willst sie abheben lassen. Claude schl√§gt vor: Quick Wins (Keyboard Shortcuts, Drag & Drop), Game Changers (AI-Priorisierung, Collaborative Lists, Time-Tracking), Delightful Details (Completion-Animations, Motivational Quotes). Jede Idee priorisiert und mit Notion/Todoist verglichen.',

    fieldGuide: [
      {
        fieldId: 'currentContext',
        explanation:
          'Was macht deine App aktuell? Was ist die Hauptfunktion?',
        example:
          'Eine To-Do-List-App wo User Aufgaben erstellen, kategorisieren und abhaken k√∂nnen. Basic Features sind implementiert.',
        tips:
          'Beschreibe den Status Quo. Was funktioniert bereits? Was ist das Alleinstellungsmerkmal?',
      },
      {
        fieldId: 'painPoints',
        explanation:
          'Was frustriert User? Was fehlt? Feedback aus User-Tests?',
        example:
          'User w√ºnschen sich: Collaboration, Priorisierung ist umst√§ndlich, keine Reminder-Funktion',
        tips:
          'Ehrlich sein! Nutze echtes User-Feedback wenn verf√ºgbar. "Keine Pain Points" gibt es nicht üòâ',
      },
      {
        fieldId: 'inspiration',
        explanation:
          'Welche Apps bewunderst du? Wer macht es gut in deiner Nische?',
        example: 'Notion (Flexibilit√§t), Todoist (Simplicity), Linear (UX)',
        tips:
          'Erw√§hne 2-3 Apps die du cool findest. Claude wird analysieren was sie gut machen',
      },
      {
        fieldId: 'quickWinFocus',
        explanation:
          'Gibt es einen Bereich wo du schnelle Verbesserungen willst?',
        example: 'Keyboard Shortcuts f√ºr Power-User',
        tips:
          'Optional. Richtung vorgeben: "Mobile Experience", "Onboarding", "Performance", "Accessibility"',
      },
    ],
  },
];